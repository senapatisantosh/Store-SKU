version: '3.8'

services:

  store-poc-zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: store-poc-zookeeper
    networks: 
      - store-poc-network
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  
  store-poc-kafka:
    image: confluentinc/cp-kafka:latest
    container_name: store-poc-kafka
    networks: 
      - store-poc-network
    depends_on:
      - store-poc-zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_ZOOKEEPER_CONNECT: store-poc-zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://store-poc-kafka:9093,OUTSIDE://store-poc-kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE

  store-poc-kafka-ui:
    image: obsidiandynamics/kafdrop:latest
    container_name: store-poc-kafka-ui
    networks: 
      - store-poc-network
    depends_on:
      - store-poc-kafka
    ports:
      - 9000:9000
    environment:
      KAFKA_BROKERCONNECT: store-poc-kafka:9093

  store-sql-server-db:
    image: "mcr.microsoft.com/mssql/server:2022-latest"
    environment:
      MSSQL_SA_PASSWORD:  "IngestionStore123"
      MSSQL_UID: "ingestionstore"
      ACCEPT_EULA: "Y"
    networks:
      - store-poc-network
    ports:
      - "1433:1433"

  store-ingestion-api:
    build:
      context: ./store-apis/Store.Api.Ingestion
      dockerfile: Dockerfile.store-api-ingestion
    container_name: store-api-ingestion
    ports:
      - "5000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    networks:
      - store-poc-network
    volumes:
      - store-ingestion-drop-loaction:/app/dropbox
    depends_on: 
      - store-sql-server-db
      - store-poc-kafka

  store-job-json-converter:
    build:
      context: ./store-jobs/Store.Job.JsonConverter
      dockerfile: Dockerfile.store-job-json-converter
    container_name: store-job-json-converter
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
    networks:
      - store-poc-network
    volumes:
      - store-ingestion-drop-loaction:/app/dropbox
    depends_on: 
      - store-sql-server-db
      - store-poc-kafka
  
  store-ui:
    build:
      context: ./store-ui
      dockerfile: Dockerfile.store-ui
    container_name: store-ui
    ports:
      - "4200:80"
    networks:
      - store-poc-network
    depends_on: 
      - store-ingestion-api

networks:
  store-poc-network:
    driver: bridge

volumes:
  store-ingestion-drop-loaction:
